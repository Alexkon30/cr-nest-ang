enum Gender {
	MALE
	FEMALE
}

type RefreshTokenResponse {
	accessToken: String!
}

input CreateUserInput {
	email: String!
	password: String
	firstName: String
	lastName: String
	patronymic: String
	roles: [RoleEnum!]
}

input UpdateUserInput {
	email: String!
	password: String
	firstName: String
	lastName: String
	patronymic: String
	roles: [RoleEnum!]
	# avatar: String
	# gender: Gender
	# isVerified: Boolean
	# isOnline: Boolean
	# isLocked: Boolean
}

input UpdateOrganizationRolesInput {
	organizationId: String!
	email: String!
	roles: [RoleEnum!]
}

type User {
	id: Int!
	email: String!
	password: String
	firstName: String
	lastName: String
	patronymic: String
	group: Group
	roles: [RoleEnum!]
	# avatar: String
	# gender: Gender
	# isVerified: Boolean
	# isOnline: Boolean
	# isLocked: Boolean
	# createdAt: String!
	# updatedAt: String!
}

type Query {
	users(role: RoleEnum): [User!] #test route
}

type Mutation {
	createUser(input: CreateUserInput! ): User
	updateUser(input: UpdateUserInput! ): User
	createUsersByAdmin(inputs: [CreateUserInput!]!, organizationId: String!): String
	updateOrganizationRoles(input: UpdateOrganizationRolesInput! ): String
}